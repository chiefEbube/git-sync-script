#!/bin/bash

# GitSync v2.0: An interactive CLI tool for syncing Git branches.
# --- Configuration ---
VERSION="2.0.0"

cat << "EOF"

 .d8888b.  d8b 888          .d8888b.                             
d88P  Y88b Y8P 888         d88P  Y88b                            
888    888     888         Y88b.                                 
888        888 888888       "Y888b.   888  888 88888b.   .d8888b 
888  88888 888 888             "Y88b. 888  888 888 "88b d88P"    
888    888 888 888               "888 888  888 888  888 888      
Y88b  d88P 888 Y88b.       Y88b  d88P Y88b 888 888  888 Y88b.    
 "Y8888P88 888  "Y888       "Y8888P"   "Y88888 888  888  "Y8888P 
                                           888                   
                                      Y8b d88P                   
                                       "Y88P"                    

EOF

# --- Welcome Message ---
echo "Welcome to GitSync v$VERSION"
echo "-------------------------------------"
echo


# 1. Get the branch to sync (feature branch)
current_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
if [ -n "$current_branch" ]; then
    read -p "? Which branch do you want to sync? (current: $current_branch) " feature_branch
    feature_branch=${feature_branch:-$current_branch} # Default to current if empty
else
    read -p "? Which branch do you want to sync? " feature_branch
    if [ -z "$feature_branch" ]; then
        echo "‚ùå Error: Feature branch cannot be empty."
        exit 1
    fi
fi

# 2. Get the branch to merge from (development branch)
read -p "? What is your main branch to merge from? (default: develop) " develop_branch
develop_branch=${develop_branch:-"develop"} # Default to 'develop' if empty

# 3. Confirmation step
echo "-------------------------------------"
echo "üö® Please confirm the sync details:"
echo "   - FROM: $develop_branch"
echo "   - INTO: $feature_branch"
echo
read -p "? Are you sure you want to proceed? (y/n) " confirmation

if [[ "$confirmation" != "y" && "$confirmation" != "Y" ]]; then
    echo "Sync cancelled by user. Exiting."
    exit 0
fi
echo "-------------------------------------"

# --- Core Logic ---

# Step 1: Commit any pending changes on the feature branch
echo "[1/6] Checking for local changes on '$feature_branch'..."

# Checkout to feature branch if not already there
if [ "$(git symbolic-ref --short HEAD)" != "$feature_branch" ]; then
    if ! git checkout "$feature_branch"; then
        echo "‚ùå Error: Could not checkout branch '$feature_branch'. It might not exist."
        exit 1
    fi
fi

if ! git diff-index --quiet HEAD --; then
    echo "   > Uncommitted changes detected."
    git add .
    read -p "   > Enter a commit message for your current changes: " commit_message
    if [ -z "$commit_message" ]; then
        commit_message="WIP: Auto-commit by gitsync script"
    fi
    git commit -m "$commit_message"
    echo "   > ‚úÖ Changes committed."
else
    echo "   > üëç No local changes to commit."
fi

# Step 2: Switch to the development branch
echo "[2/6] Switching to '$develop_branch'..."
if ! git checkout "$develop_branch"; then
    echo "‚ùå Error: Could not checkout branch '$develop_branch'. It might not exist."
    exit 1
fi

# Step 3: Pull the latest changes
echo "[3/6] Pulling latest changes for '$develop_branch'..."
git pull

# Step 4: Switch back to the feature branch
echo "[4/6] Returning to '$feature_branch'..."
git checkout "$feature_branch"

# Step 5: Merge the development branch
echo "[5/6] Merging '$develop_branch' into '$feature_branch'..."
if ! git merge "$develop_branch" --no-edit; then
    echo "‚ö†Ô∏è Merge conflict detected! Please resolve conflicts manually and commit."
    exit 1
fi

# Step 6: Push the updated feature branch
echo "[6/6] Pushing changes to remote..."
git push

echo "-------------------------------------"
echo "üéâ Sync complete! Your branch '$feature_branch' is now up-to-date with '$develop_branch'."